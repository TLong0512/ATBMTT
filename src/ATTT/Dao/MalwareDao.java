/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package ATTT.Dao;

import ATTT.Dao.AbstractDao;
import ATTT.Mapper.impl.MalwareMapper;
import ATTT.Model.MalwareModel;
import java.util.ArrayList;
import java.util.List;

public class MalwareDao extends AbstractDao<MalwareDao> {

    public List<MalwareModel> findAll() {
        String sql = "SELECT malware.id, malware.name, malware.description, "
                + "malware.other_name, malware.targeted_obj, malware.original_nation, "
                + "malware.author, malware.born, malware.solving, ranking.ranking, group_concat(type.typename) as type_name"
                + "  FROM malware inner join malware_type on malware.id = malware_type.malware_id\n"
                + "inner join type on malware_type.type_id = type.id inner join ranking on malware.ranking_id = ranking.id group by malware_id";
        return query(sql, new MalwareMapper());
    }

    public List<MalwareModel> findByName(String name) {
        String sql = "SELECT malware.id, malware.name,malware.description, "
                + "malware.other_name, malware.targeted_obj, malware.original_nation, "
                + "malware.author, malware.born, malware.solving, ranking.ranking, group_concat(type.typename) as type_name"
                + "  FROM malware inner join malware_type on malware.id = malware_type.malware_id\n"
                + "inner join type on malware_type.type_id = type.id inner join ranking on malware.ranking_id = ranking.id"
                + " where malware.name = ? or malware.other_name = ? group by malware_id";
        return query(sql, new MalwareMapper(), name, name);
    }

    public MalwareModel findById(Integer id) {
        String sql = "SELECT malware.id, malware.name,malware.description, "
                + "malware.other_name, malware.targeted_obj, malware.original_nation, "
                + "malware.author, malware.born, malware.solving, ranking.ranking, group_concat(type.typename) as type_name"
                + "  FROM malware inner join malware_type on malware.id = malware_type.malware_id\n"
                + "inner join type on malware_type.type_id = type.id inner join ranking on malware.ranking_id = ranking.id"
                + " where malware.id = ? group by malware_id";
        return query(sql, new MalwareMapper(), id).get(0);
    }
    
    public List<MalwareModel> findByTypeId(Integer typeId) {
        String sql1 = "SELECT malware_type.malware_id FROM malware_type INNER JOIN type on malware_type.type_id = type.id where type_id = ?";
        List<Integer> malwareIdList = findListId(sql1, typeId);
        List<MalwareModel> result = new ArrayList<>();
        for (Integer id : malwareIdList) {
            result.add(findById(id));
        }
        System.out.println(result);
        return result;
    }

    public List<MalwareModel> findByTypeName(String typeName) {
        String sql1 = "SELECT malware_type.malware_id, "
                + "type.typename FROM malware_type INNER JOIN type on malware_type.type_id = type.id\n"
                + "where type.typename = ?";
        List<Integer> malwareIdList = findListId(sql1, typeName);
        List<MalwareModel> result=  new ArrayList<>();
        for(Integer id : malwareIdList)
        {
            result.add(findById(id));
        }
       return result;
    }
}
